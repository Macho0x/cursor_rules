{
  "language": "C++",
  "context": {
    "purpose": "Developing a trading application with heavy computations, asynchronous features, and comprehensive logging, inspired by best practices from Rust and Go."
  },
  "guidelines": {
    "general": [
      "Use modern C++ standards (C++17 or C++20) to leverage features like structured bindings, ranges, coroutines, and concepts.",
      "Write clear, concise, and idiomatic C++ code with modularity and reuse in mind.",
      "Prioritize stack allocation over heap allocation for performance-critical paths.",
      "Encapsulate reusable logic using templates, generic programming, and modular design.",
      "Ensure memory safety using RAII (Resource Acquisition Is Initialization) and smart pointers (std::unique_ptr, std::shared_ptr).",
      "Adopt structured logging to capture critical events and performance metrics in JSON format."
    ],
    "specific": {
      "trading": [
        "Implement low-latency trading systems using optimized data structures (e.g., std::deque for order books or custom containers).",
        "Leverage fixed-point arithmetic (e.g., Boost.Multiprecision or custom types) to avoid floating-point inaccuracies.",
        "Ensure deterministic order matching logic with predictable behavior under high load.",
        "Log trade execution, market data events, and system state changes in structured formats (e.g., JSON)."
      ],
      "calculations": [
        "Use libraries like Eigen or Armadillo for numerical computations with matrix support.",
        "Optimize loops and transformations using STL algorithms and iterators.",
        "Profile and eliminate bottlenecks using tools like Intel VTune or perf.",
        "Ensure numerical precision with appropriate settings for floating-point or fixed-point calculations."
      ],
      "async": [
        "Utilize coroutines (C++20) or libraries like Boost.Asio for asynchronous programming.",
        "Manage shared state using std::mutex, std::shared_mutex, or std::atomic for thread safety.",
        "Use thread pools (e.g., Intel TBB, Boost.Thread) for scalable concurrency.",
        "Implement structured concurrency patterns to ensure proper task lifecycle and cleanup."
      ],
      "logging": [
        "Use a robust JSON logging library, such as nlohmann/json or Boost.Log, for structured and efficient logging.",
        "Include metadata such as timestamps, log levels, request IDs, and correlation IDs in logs.",
        "Log critical paths (e.g., trade execution, API requests, and system errors) with adjustable verbosity levels.",
        "Implement API endpoint logging to capture incoming requests, responses, and error conditions."
      ],
      "api_logging": [
        "Log all incoming API requests, headers, payloads, and response codes.",
        "Mask sensitive data such as API keys and passwords before logging.",
        "Track API performance by logging response times, retry counts, and errors.",
        "Integrate libraries like cpprestsdk or Boost.Beast for RESTful API and WebSocket interactions."
      ]
    },
    "testing": [
      "Write unit tests for trading algorithms, logging, and asynchronous code.",
      "Simulate market scenarios to validate trading strategies and execution pipelines.",
      "Validate JSON log structure and content using schema validation tools.",
      "Stress-test asynchronous systems to identify deadlocks and contention points."
    ],
    "style": [
      "Follow the Google C++ Style Guide for readability and maintainability.",
      "Use descriptive variable names like is_ready and has_data for clarity.",
      "Document all APIs and public interfaces using Doxygen or similar tools."
    ]
  },
  "tooling": {
    "compiler": "g++ or clang++ with optimization flags (-O2 or -O3) for release builds.",
    "formatting": "Enable ClangFormat with a style optimized for trading and async systems.",
    "analysis": [
      "Enable Clang-Tidy for static code analysis.",
      "Use tools like AddressSanitizer or Valgrind for detecting memory leaks and race conditions."
    ],
    "libraries": [
      "Boost.Asio or libuv for asynchronous programming.",
      "nlohmann/json or RapidJSON for JSON parsing and serialization.",
      "spdlog or Boost.Log for structured logging.",
      "cpprestsdk or Boost.Beast for API client and server interactions.",
      "SQLite or LMDB for lightweight data storage.",
      "Eigen or Armadillo for numerical and matrix calculations."
    ]
  }
}
