{
  "language": "Go",
  "expertise": "You are an expert in Go, async programming, and concurrent systems.",
  "keyPrinciples": [
    "Write clear, concise, and idiomatic Go code with accurate examples.",
    "Use Go’s concurrency features effectively, leveraging goroutines and channels.",
    "Prioritize modularity, clean code organization, and efficient resource management.",
    "Use slices over arrays for flexibility and performance.",
    "Use expressive variable names that convey intent (e.g., isReady, hasData).",
    "Adhere to Go's naming conventions: camelCase for variables and functions, PascalCase for exported identifiers.",
    "Avoid code duplication; use functions and packages to encapsulate reusable logic.",
    "Write code with safety, concurrency, and performance in mind, embracing Go’s simplicity and garbage collection model.",
    "Use Zerolog logging for structured, high-performance logging.",
    "Add API endpoint logging where necessary to track requests, responses, and errors."
  ],
  "asyncProgramming": [
    "Use goroutines for concurrent execution.",
    "Use select for managing multiple channels and cancellations.",
    "Favor structured concurrency by managing context.Context for cancellation and deadlines.",
    "Implement timeouts, retries, and backoff strategies for robust async operations using libraries like github.com/cenkalti/backoff.",
    "Use sync.WaitGroup or channel-based signaling for coordination across goroutines.",
    "Apply runtime.GOMAXPROCS to optimize CPU utilization for multi-core systems."
  ],
  "channelsAndConcurrency": [
    "Use chan for communication between goroutines.",
    "Use buffered channels for controlling backpressure; handle full channels gracefully.",
    "Use sync.Mutex or sync.RWMutex for shared state, avoiding race conditions.",
    "Prefer context.Context for propagating cancellations and deadlines across goroutines.",
    "Use select blocks to multiplex and prioritize communication."
  ],
  "errorHandlingAndSafety": [
    "Embrace Go’s idiomatic error handling with error values and if err != nil patterns.",
    "Return descriptive errors using fmt.Errorf or custom error types.",
    "Handle errors and edge cases early, propagating errors where appropriate.",
    "Avoid panics in production code; recover only at well-defined boundaries (e.g., HTTP handlers).",
    "Use tools like errgroup from golang.org/x/sync/errgroup for managing errors in concurrent tasks."
  ],
  "performanceOptimization": [
    "Minimize goroutine overhead; avoid spawning unnecessary goroutines.",
    "Use sync primitives like sync.Pool for resource reuse.",
    "Avoid blocking operations inside hot paths or critical sections.",
    "Profile and optimize using pprof and tools like go tool trace.",
    "Apply runtime.GOMAXPROCS to leverage all available CPU cores effectively.",
    "Implement rate limiting and debouncing where appropriate to avoid overloading resources."
  ],
  "keyConventions": [
    "Structure the application into packages: separate concerns like networking, database, and business logic.",
    "Use environment variables for configuration management (e.g., github.com/joho/godotenv).",
    "Ensure code is well-documented with comments and GoDoc.",
    "Log critical events and errors with Zerolog, ensuring all logs are structured and machine-readable.",
    "Add logging to API endpoints for requests, responses, and errors to aid debugging and monitoring."
  ],
  "asyncEcosystem": [
    "Use net/http or github.com/go-resty/resty for HTTP clients.",
    "Leverage gorilla/websocket for WebSocket support.",
    "Use database/sql with a driver like github.com/lib/pq for database interactions.",
    "Utilize google.golang.org/grpc for gRPC with Go.",
    "Use encoding/json or github.com/json-iterator/go for serialization and deserialization.",
    "Use Zerolog for structured logging with minimal performance overhead."
  ]
}
